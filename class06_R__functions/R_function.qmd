---
title: "R functions"
author: "Jiachen Fan (A17662703)"
format: pdf
---

# A. Improve this regular R code by abstracting the main activities in your own new function. Note, we will go through this example together in the formal lecture. The main steps should entail running through the code to see if it works, simplifying to a core working code snippet, reducing any calculation duplication, and finally transferring your new streamlined code into a more useful function for you.
Let's have a look at original code
```{r}
df <- data.frame(a=1:10, b=seq(200,400,length=10),c=11:20,d=NA)
df
df$a <- (df$a - min(df$a)) / (max(df$a) - min(df$a)) # normalize values in df$a 
df
df$b <- (df$b - min(df$a)) / (max(df$b) - min(df$b))
df
df$c <- (df$c - min(df$c)) / (max(df$c) - min(df$c)) # normalize values in df$c
df
df$d <- (df$d - min(df$d)) / (max(df$a) - min(df$d))
df
```

Now we can simplify it using function 'normalize'
```{r}
# Define a normalization function
normalize <- function(x) {
    (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}

# Create data frame
df <- data.frame(a=1:10, b=seq(200,400,length=10),c=11:20,d=NA)

# Apply normalize to df$a and df$c
df[c('a','c')] <- apply(df[c('a','c')], 2, normalize)
df$b <- normalize(df$b)+1         
#(df$b - min(df$a)) / (max(df$b) - min(df$b)) = (df$b - min(df$b)+min(df$b)-min(df$a)) / (max(df$b) - min(df$b)) = normalize(df$b) + 1/1
df$d <- (df$d - min(df$d)) / (max(df$a) - min(df$d))

# It is hard to improve because the codes are different for each column. It will be much easier if the original code meant to normalize all the columns.

```

# B. Next improve the below example code for the analysis of protein drug interactions by abstracting the main activities in your own new function. Then answer questions 1 to 6 below. It is recommended that you start a new Project in RStudio in a new directory and then install the bio3d package noted in the R code below (N.B. you can use the command install.packages("bio3d") or the RStudio interface to do this). Then run through the code to see if it works, fix any copy/paste errors before simplifying to a core working code snippet, reducing any calculation duplication, and finally transferring it into a more useful function for you.

```{r}
# Can you improve this analysis code?
library(bio3d)
s1 <- read.pdb("4AKE") # kinase with drug
s2 <- read.pdb("1AKE") # kinase no drug
s3 <- read.pdb("1E4Y") # kinase with drug
s1.chainA <- trim.pdb(s1, chain="A", elety="CA")
s2.chainA <- trim.pdb(s2, chain="A", elety="CA")
s3.chainA <- trim.pdb(s3, chain="A", elety="CA")         # change 's1' to 's3'
s1.b <- s1.chainA$atom$b
s2.b <- s2.chainA$atom$b
s3.b <- s3.chainA$atom$b
plotb3(s1.b, sse=s1.chainA, typ="l", ylab="Bfactor")
plotb3(s2.b, sse=s2.chainA, typ="l", ylab="Bfactor")
plotb3(s3.b, sse=s3.chainA, typ="l", ylab="Bfactor")
```

# Q6. How would you generalize the original code above to work with any set of input protein structures?

Function 'Bfactor' can receive any protein PDB data, and return a plot of Bfactor. It receives the four-letter PDB identifier (PDBID) and a chain identifier (chainID) as its inputs, and plots the temperature factors (B factors) of the backbone C-alpha atoms in a specified chain of the protein.

```{r}
# First input install.packages("bio3d") in console

# Generate function 'Bfactor'
library(bio3d)
Bfactor <- function(PDBID, chainID){
  x <- read.pdb(PDBID)                                   # Read the PDB data
  x.chain <- trim.pdb(x, chain=chainID, elety="CA")      # Trim the structure to get only the specified chain and element type
  x.b <- x.chain$atom$b                                  # Extract the B-factors
  plotb3(x.b, sse=x.chain, typ="l", ylab="Bfactor")      # Plot the B-factors
}
```

We can use PDBID('4AKE'), chainID ('A') as an example.
```{r}
Bfactor("4AKE", "A")
```
```{r}
Bfactor('1AKE', 'A')
Bfactor('1E4Y', 'A')
```

