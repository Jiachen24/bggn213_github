---
title: "Class 13: Transcriptomics and the analysis of RNA-Seq data"
author: "Jiachen Fan (A17662703)"
format: pdf
---
# 2. Bioconductor setup
install.packages("BiocManager")
BiocManager::install()

# For this class we will need DESeq2:
BiocManager::install("DESeq2")

```{r}
#| message: false
#| warning: false
library(DESeq2)
```

# 3. Import countData and colData
```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
head(counts)
head(metadata)
```
> Q1. How many genes are in this dataset?

```{r}
dim(counts)
```
38694 genes.

> Q2. How many ‘control’ cell lines do we have? 

```{r}
table(metadata$dex)
```
4 'control' cell lines.

# 4. Toy differential gene expression
```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

- Step 1. Identify and extract the "control" columns.
- Step 2. Calculate the mean value per gene for all these "control" columns and save as 'control.mean'.
- Step 3. Do the same for treated.
- Step 4. Compare the 'control.mean' and 'treated.mean' values.

Step 1:

> Q3. How would you make the above code in either approach more robust? Is there a function that could help here?


```{r}
control.inds <- metadata$dex == "control"
control.mean <- rowMeans(counts[,control.inds])
head(control.mean)
```

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.mean <- rowMeans(counts[,metadata$dex =="treated"])
head(treated.mean)
```


```{r}
meancounts <- data.frame(control.mean, treated.mean)
```


> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts)
```


> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}
library(ggplot2)

ggplot(meancounts)+
  aes(control.mean, treated.mean)+
  geom_point(alpha=0.2)
```
> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log = 'xy')
```
```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```
> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The arr.ind=TRUE argument will clause which() to return both the row and column indices (i.e. positions) where there are TRUE values. In this case this will tell us which genes (rows) and samples (columns) have zero counts. We are going to ignore any genes that have zero counts in any sample so we just focus on the row answer. Calling unique() will ensure we don’t count any row twice if it has zero entries in both samples.

```{r}
nrow(mycounts)
```

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
sum(mycounts$log2fc > +2)
```
Up: 250

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(mycounts$log2fc < -2)
```
Down: 367

> Q10. Do you trust these results? Why or why not?

No. The analysis is only the fold change. There is no statistical analysis to show if the difference is significant.

# 5. Setting up for DESeq

```{r}
library(DESeq2)
citation("DESeq2")
```
```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```
```{r}
dds <- DESeq(dds)
```
# 6. Principal Component Analysis (PCA)

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```


```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
# Calculate percent variance per PC for the plot axis labels
percentVar <- round(100 * attr(pcaData, "percentVar"))
```

```{r}
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```

# 7. DESeq analysis
To get the results out of this 'dds' object we can use the DESeq 'results()' function.
```{r}
res <- results(dds)
head(res)
```
# 8. Adding annotation data

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
head(res)
```
> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```
```{r}
write.csv(res[ord,], "deseq_results.csv")
```

# 9. Data Visualization

```{r}
plot(res$log2FoldChange,res$padj)
```
```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange > 2 ] <- "black"
mycols[res$log2FoldChange < -2 ] <- "black"
mycols[res$padj > 0.05] <- "gray"
```



```{r}
plot(res$log2FoldChange,-log(res$padj), col=mycols,
     xlab= 'Log2 Fold-Change',
     ylab= '-log P-value')
abline(v=c(-2,2), col='red')
abline(h=-log(0.05), col="blue", lty=2)
```
```{r}
# BiocManager::install("EnhancedVolcano")
library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```


# 10. Pathway analysis
```{r}
write.csv(res, file="myresults.csv")
```

```{r}
# Run in your R console (i.e. not your Rmarkdown doc!)
#BiocManager::install( c("pathview", "gage", "gageData") )
```

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```
```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

Lets have a look at one of these pathways
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
![](hsa05310.pathview.png)

```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)
```
> Q12. Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?


```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05332")
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04940")
```
![](hsa05332.pathview.png)

![](hsa04940.pathview.png)
