---
title: "class06"
author: "Jiachen Fan (A17662703)"
format: pdf
---
# Example
Let's start with an example. Write a script to grade students' homework. We drop the lowest score of every student.
```{r}
#Example input vectors to start with 
student1<-c(100,100,100,100,100,100,100,90) 
student2<-c(100,NA,90,90,90,90,97,80) 
student3<-c(90,NA,NA,NA,NA,NA,NA,NA)
```

I can use 'min()' to find the lowest score.
```{r}
min(student1)
min(student2)
min(student3)

```

We can use 'which.min()' to find the location of lowest score.
```{r}
which.min(student1)
which.min(student2)
which.min(student3)
```
The result is correct for student1, but not for student2 and student3 because of 'NA'. So we have to change 'NA' to '0'.
```{r}
student1[is.na(student1)] <- 0
student2[is.na(student2)] <- 0
student3[is.na(student3)] <- 0

```


We want to exclude the lowest score
```{r}
final_student1 <- student1[-which.min(student1)]
final_student1
final_student2 <- student2[-which.min(student2)]
final_student2
final_student3 <- student3[-which.min(student3)]
final_student3
```
Let's calculate the average using 'mean()'
```{r}
mean(final_student1)
mean(final_student2)
mean(final_student3)
```
# Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput”

Now we can build a function using the previous script.
```{r}
grade <- function(scores){
  scores[is.na(scores)] <- 0        # convert NA to '0'
  mean(scores[-which.min(scores)])  # drop the lowest score and calculate the mean
}

# read the csv file from url
scores <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)
scores
```

A function is forced to use here which is 'apply()'. 'grade()' only works for a vector.
'apply(X, margin, FUN)' can help us grade all students
```{r}
ans <- apply(scores, 1, grade)       # margin = 1 indicates rows
ans
```

# Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? 
```{r}
# find the student with highest score using 'which.max()'
which.max(apply(scores,1,grade))
```
So student 18 is the top scoring student.


# Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?
Get the average score over all students on the same homework to figure out which is toughest (means lowest average scores across different homework)
```{r}
apply(scores, 2, grade)                   # margin = 2 indicates columns
which.min(apply(scores, 2, grade))   
```
Homework 2 is the hardest.


# Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)?
To get the most predictive, I will use Pearson correlation between the average score of the student and the score in different homework.
```{r}
scores[is.na(scores)] <- 0                  # change NA to 0
P <- numeric(5)                             # initialize 'P' as a numeric vector
for (i in 1:5){                             # for loop to go through every homework
  P[i] <- cor(apply(scores, 1, grade),scores[,i])   # 'cor(x, y)' for Pearson correlation
}
P
which.max(P)
```
Based on Pearson correlation, homework 5 is the most predictive one.

```{r}
# Here is a different way using 'apply()'
apply(scores,2,cor,y = ans)     # after function, we can add more arguments
which.max(apply(scores,2,cor,y = ans))
```
# Q5. Make sure you save your Quarto document and can click the “Render” (or Rmarkdown”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope.



